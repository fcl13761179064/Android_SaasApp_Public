apply plugin: 'com.android.application'
apply plugin: 'android-aspectjx'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.ayla.hotelsaas"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode getSelfDefinedVersion("code")
        versionName getSelfDefinedVersion("name")
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ndk {
            // 设置支持的SO库架构
            //  abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            abiFilters "armeabi-v7a" //阿里云的sdk api8以上就需要静止2个so文件

        }
        lintOptions {
            checkReleaseBuilds false
            abortOnError false
        }


        signingConfigs {
            config {
                file("../signing.properties").with { propFile ->
                    if (propFile.canRead()) {
                        println 'signing.properties found, reading signing.properties'
                        def keystoreProperties = new Properties()
                        keystoreProperties.load(new FileInputStream(propFile))

                        v1SigningEnabled true
                        v2SigningEnabled true
                        keyAlias keystoreProperties['keyAlias']
                        keyPassword keystoreProperties['keyPassword']
                        storePassword keystoreProperties['storePassword']
                        storeFile rootProject.file("./ayla_test.jks")
                    } else {
                        println 'Unable to read signing.properties'
                    }
                }
            }
        }


        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }


        buildTypes {
            release {
                debuggable false
                zipAlignEnabled true
                shrinkResources false  // 移除无用的resource文件
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                signingConfig signingConfigs.config
            }
            debug {
                debuggable true
                zipAlignEnabled true
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                signingConfig signingConfigs.config
                versionNameSuffix ".beta"
                applicationIdSuffix ".beta"
            }
        }

        flavorDimensions "server_domain"

        productFlavors {
            dev {//开发服务地址
                buildConfigField("String", "server_domain", "\"dev\"")
                dimension "server_domain"
                manifestPlaceholders["sentryEnvironment"] = "qa"
            }
            qa {//测试服务地址
                buildConfigField("String", "server_domain", "\"qa\"")
                dimension "server_domain"
                manifestPlaceholders["sentryEnvironment"] = "qa"
            }
            stage {//stage
                buildConfigField("String", "server_domain", "\"stage\"")
                dimension "server_domain"
                manifestPlaceholders["sentryEnvironment"] = "qa"
            }
            prod {//量产服务地址
                buildConfigField("String", "server_domain", "\"prod\"")
                dimension "server_domain"
                manifestPlaceholders["sentryEnvironment"] = "product"

            }
        }


        testOptions {
            unitTests.returnDefaultValues = true
        }

        repositories {
            flatDir {
                dirs 'libs'
            }
        }

        buildFeatures {
            viewBinding true
        }

        aspectjx {
            exclude 'org.jetbrains.kotlin', "module-info", 'versions.9'
        }
    }

    dependencies {
        implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
        implementation 'junit:junit:4.13.2'
        androidTestImplementation 'androidx.test.ext:junit:1.1.3'
        androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
        implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
        implementation "org.jetbrains.kotlin:kotlin-reflect:1.5.31"
        implementation project(path: ':lib_ap_distribute')
        implementation project(path: ':h5_dsbridge')
        implementation 'com.github.bumptech.glide:glide:4.12.0'
        annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'
        implementation 'cn.bingoogolapple:bga-qrcode-zbar:1.3.7'
        implementation 'com.github.tbruyelle:rxpermissions:0.10.2'
        implementation "com.jakewharton:butterknife:10.2.3"
        annotationProcessor "com.jakewharton:butterknife-compiler:10.2.3"
        implementation "io.reactivex.rxjava2:rxjava:2.2.13"
        implementation "io.reactivex.rxjava2:rxandroid:2.1.1"
        implementation "com.squareup.retrofit2:retrofit:2.9.0"
        implementation "com.squareup.retrofit2:converter-gson:2.9.0"
        implementation "com.squareup.retrofit2:adapter-rxjava2:2.9.0"
        implementation "com.squareup.okhttp3:logging-interceptor:3.6.0"
        implementation 'com.scwang.smart:refresh-layout-kernel:2.0.1'
        implementation 'com.scwang.smart:refresh-header-classics:2.0.1'    //经典刷新头
        implementation 'com.scwang.smart:refresh-footer-classics:2.0.1'    //经典加载
        implementation "com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.34"
        implementation "com.blankj:utilcodex:1.30.6"
        implementation "org.greenrobot:eventbus:3.0.0"
        implementation 'com.xw.repo:bubbleseekbar:3.20'
        implementation 'io.sentry:sentry-android:5.5.2'
        implementation 'com.github.AylaAsia:HongYanConfigLib:0.0.10'
        //MagicIndicator
        implementation 'com.github.hackware1993:MagicIndicator:1.7.0'

        implementation 'androidx.core:core-ktx:1.6.0'
        implementation 'androidx.appcompat:appcompat:1.3.1'
        // Anko Commons
        implementation "org.jetbrains.anko:anko-commons:$anko_version"
        //RxLifecycle
        implementation 'com.trello.rxlifecycle2:rxlifecycle:2.2.1'
        implementation 'com.trello.rxlifecycle2:rxlifecycle-android:2.2.1'

        implementation "com.github.yyued:SVGAPlayer-Android:$svga_version"
        // lifecycle-ViewModel
        implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

        // lifecycle-LiveData
        implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

        implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.3.1'//lifecycleScope
        implementation "com.squareup.okhttp3:okhttp:${ok_http_version}"

        implementation 'com.github.zyyoona7:pickerview:1.0.9'
        //屏幕适配
        implementation 'com.github.JessYanCoding:AndroidAutoSize:v1.2.1'


        implementation 'com.google.android.material:material:1.2.1'

        //二维码扫描
        api('com.huawei.hms:scan:2.1.0.300')

    }
}

def getSelfDefinedVersion(String type) {
    def version_info = new Properties()
    def versionFile = new File(getProjectDir(), "version_info.properties")
    version_info.load(new FileInputStream(versionFile))
    String VERSION_NAME = version_info.getProperty("VERSION_NAME").toString()
    int VERSION_CODE = version_info.getProperty("VERSION_CODE").toInteger()
    if ("code" == type) {
        def taskNames = gradle.startParameter.taskNames
        for (def name in taskNames) {
            if (name.toLowerCase().contains("release")) {
                version_info.setProperty("VERSION_CODE", (++VERSION_CODE).toString())
                version_info.store(versionFile.newWriter(), null)
                break
            }
        }
        VERSION_CODE
    } else if ("name" == type) {
        VERSION_NAME
    }
}
/**
 * 提供给cicd打包
 */
task cd_qa(type: Copy) {
    group "gitlabCD"
    from('build/outputs/apk/qa/debug/')
    into("build/outputs/apk")
    include('app-qa-debug.apk')
    rename('app-qa-debug.apk', 'app.apk')
}
cd_qa.dependsOn(":app:assembleQaDebug")

/**
 * 提供给cicd打包
 */
task cd_prod(type: Copy) {
    group "gitlabCD"
    from('build/outputs/apk/prod/debug/')
    into("build/outputs/apk")
    include('app-prod-debug.apk')
    rename('app-prod-debug.apk', 'app.apk')
}
cd_prod.dependsOn(":app:assembleProdDebug")

task cd_stage(type: Copy) {
    group "gitlabCD"
    from('build/outputs/apk/stage/debug/')
    into("build/outputs/apk")
    include('app-stage-debug.apk')
    rename('app-stage-debug.apk', 'app.apk')
}
cd_stage.dependsOn(":app:assembleStageDebug")